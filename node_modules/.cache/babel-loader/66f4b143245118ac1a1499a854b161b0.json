{"ast":null,"code":"import _asyncToGenerator from\"/Users/babarhanif/minting dapp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"/Users/babarhanif/minting dapp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _regeneratorRuntime from\"/Users/babarhanif/minting dapp/node_modules/@babel/runtime/regenerator/index.js\";import React,{useState,useEffect}from\"react\";import abi from\"./abi.json\";import Web3 from\"web3\";import detectEthereumProvider from'@metamask/detect-provider';import{useMoralis}from\"react-moralis\";import{toast}from'react-toastify';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";require(\"dotenv\").config();var _process$env=process.env,REACT_APP_CONTRACT_ADDRESS=_process$env.REACT_APP_CONTRACT_ADDRESS,REACT_APP_MINT_PRICE=_process$env.REACT_APP_MINT_PRICE,REACT_APP_MINT_PRICE_AFTER_2K=_process$env.REACT_APP_MINT_PRICE_AFTER_2K;var SELECTEDNETWORK=\"1\";var SELECTEDNETWORKNAME=\" ETHEREUM MAINNET\";var nftquantity=10;function Mintbtn(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setLoading=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),isWalletConnected=_useState4[0],setIsWalletConnected=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),errormsg=_useState6[0],setErrorMsg=_useState6[1];var _useState7=useState(true),_useState8=_slicedToArray(_useState7,2),hideMinting=_useState8[0],setHideMinting=_useState8[1];var _useState9=useState(1),_useState10=_slicedToArray(_useState9,2),quantity=_useState10[0],setQuantity=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),totalSupply=_useState12[0],settotalSupply=_useState12[1];var _useMoralis=useMoralis(),authenticate=_useMoralis.authenticate,isAuthenticated=_useMoralis.isAuthenticated,isAuthenticating=_useMoralis.isAuthenticating,user=_useMoralis.user,account=_useMoralis.account,logout=_useMoralis.logout;var login=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"isAuthenticated :: \",isAuthenticated);if(isAuthenticated){_context.next=4;break;}_context.next=4;return authenticate({signingMessage:\"Log-in BTCBULLDOG\"}).then(function(user){if(user){toast.success(\"Wallet connected successfully\");}console.log(\"logged in user:\",user);console.log(user.get(\"ethAddress\"));}).catch(function(error){console.log(error);});case 4:case\"end\":return _context.stop();}}},_callee);}));return function login(){return _ref.apply(this,arguments);};}();var logOut=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.next=2;return logout();case 2:toast.success(\"Logout successfully\");console.log(\"logged out\");case 4:case\"end\":return _context2.stop();}}},_callee2);}));return function logOut(){return _ref2.apply(this,arguments);};}();var getProvider=function getProvider(){//  const { provider } = store.getState();\nvar newProvider=null;try{var _window$ethereum,_window$ethereum2;if(!window.ethereum)throw new Error(\"Wallet not found\");//   if (window.ethereum?.providers) {\n//     newProvider =\n//       window.ethereum.providers &&\n//       window.ethereum.providers.find((provider) => provider.isMetaMask);\n//   }\nif((_window$ethereum=window.ethereum)!==null&&_window$ethereum!==void 0&&_window$ethereum.isCoinbaseWallet||(_window$ethereum2=window.ethereum)!==null&&_window$ethereum2!==void 0&&_window$ethereum2.overrideIsMetaMask)newProvider=window.ethereum.providers.find(function(provider){return provider.isMetaMask;});else newProvider=window.ethereum;return newProvider;}catch(err){console.log(err,\"ERROR_Wallet\");//   store.dispatch(\n//     alert({\n//       title: \"\",\n//       message: err.message || \"Window.ethereum not found or provider missed\",\n//       severity: \"error\",\n//       show: true,\n//     })\n//   );\n}};useEffect(function(){function walletProvider(){return _walletProvider.apply(this,arguments);}function _walletProvider(){_walletProvider=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var handleEthereum,web3,contractaddress,ct,prevMetaMaskAccount,provider,accountsList;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:_context3.prev=0;handleEthereum=function handleEthereum(){var _window=window,ethereum=_window.ethereum;if(ethereum&&ethereum.isMetaMask){console.log('Ethereum successfully detected!');// setProvider(true);\n}else{setErrorMsg('Please install MetaMask!');// setProvider(false);\n}};_context3.next=4;return detectEthereumProvider();case 4:if(!_context3.sent){_context3.next=35;break;}// setProvider(true);\n// window.web3 = new Web3(window.ethereum);\nweb3=new Web3(getProvider()||Web3.givenProvider);// const web3 = window.web3;\n_context3.next=8;return web3.eth.net.getId();case 8:_context3.t0=_context3.sent;_context3.t1=SELECTEDNETWORK;if(!(_context3.t0==_context3.t1)){_context3.next=32;break;}contractaddress=REACT_APP_CONTRACT_ADDRESS;ct=new web3.eth.Contract(abi,contractaddress);settotalSupply(10);_context3.t2=nftquantity;_context3.next=17;return ct.methods.totalSupply().call();case 17:_context3.t3=_context3.sent;_context3.t4=_context3.t2-_context3.t3;if(!(_context3.t4==0)){_context3.next=21;break;}setErrorMsg(\"All NFTs minted, Sale has ended\");case 21:_context3.next=23;return web3.eth.getAccounts();case 23:prevMetaMaskAccount=_context3.sent;// console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\nprovider=getProvider();if(!(prevMetaMaskAccount.length===0)){_context3.next=30;break;}_context3.next=28;return provider.request({method:\"eth_requestAccounts\"});case 28:accountsList=_context3.sent;// console.log(provider, \"accountsList ==> \", accountsList.length);\nif(accountsList&&accountsList.length>0){toast.success(\"Metamask wallet connected successfully\");}case 30:_context3.next=33;break;case 32:// setProvider(false);\nsetErrorMsg(\"Select \\\"\"+SELECTEDNETWORKNAME+\"\\\" network in your wallet to mint the NFT\");case 33:_context3.next=36;break;case 35:setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");// setProvider(false);\ncase 36:if(window.ethereum){handleEthereum();}else{window.addEventListener('ethereum#initialized',handleEthereum,{once:true});setTimeout(handleEthereum,10000);}_context3.next=43;break;case 39:_context3.prev=39;_context3.t5=_context3[\"catch\"](0);console.log(\"Error :: \",_context3.t5);if(_context3.t5&&_context3.t5.code&&_context3.t5.message){toast.error(_context3.t5.message);}case 43:case\"end\":return _context3.stop();}}},_callee3,null,[[0,39]]);}));return _walletProvider.apply(this,arguments);}walletProvider();},[]);function resetMinting(_x){return _resetMinting.apply(this,arguments);}function _resetMinting(){_resetMinting=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ct){return _regeneratorRuntime.wrap(function _callee4$(_context4){while(1){switch(_context4.prev=_context4.next){case 0:_context4.t0=settotalSupply;_context4.next=3;return ct.methods.totalSupply().call();case 3:_context4.t1=_context4.sent;(0,_context4.t0)(_context4.t1);setQuantity(1);setHideMinting(false);case 7:case\"end\":return _context4.stop();}}},_callee4);}));return _resetMinting.apply(this,arguments);}function loadWeb3(){return _loadWeb.apply(this,arguments);}function _loadWeb(){_loadWeb=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee8(){var web3,contractaddress,ct,current,baseURIis,provider,prevMetaMaskAccount,accountsList,metaMaskAccount,requiredBalance;return _regeneratorRuntime.wrap(function _callee8$(_context8){while(1){switch(_context8.prev=_context8.next){case 0:setHideMinting(true);// await login();\n_context8.prev=1;_context8.next=4;return detectEthereumProvider();case 4:if(!_context8.sent){_context8.next=53;break;}web3=new Web3(getProvider()||Web3.givenProvider);_context8.next=8;return web3.eth.net.getId();case 8:_context8.t0=_context8.sent;_context8.t1=SELECTEDNETWORK;if(!(_context8.t0==_context8.t1)){_context8.next=46;break;}// creating contract instance\ncontractaddress=REACT_APP_CONTRACT_ADDRESS;ct=new web3.eth.Contract(abi,contractaddress);_context8.next=15;return ct.methods.totalSupply().call();case 15:current=_context8.sent;console.log(nftquantity,\"======= current ========\",current);if(!(Number(current)===nftquantity)){_context8.next=24;break;}console.log(\"======= total equal ========\");toast.warn(\"No NFT Found\");console.log(\"Sold out\");_context8.next=23;return resetMinting(ct);case 23:return _context8.abrupt(\"return\");case 24:_context8.next=26;return ct.methods.baseURI().call();case 26:baseURIis=_context8.sent;console.log(\"get baseURIis ==> \",baseURIis);provider=getProvider();_context8.next=31;return web3.eth.getAccounts();case 31:prevMetaMaskAccount=_context8.sent;if(!(prevMetaMaskAccount.length===0)){_context8.next=37;break;}_context8.next=35;return provider.request({method:\"eth_requestAccounts\"});case 35:accountsList=_context8.sent;// console.log(\"accountsList ==> \", accountsList.length);\nif(accountsList&&accountsList.length>0){toast.success(\"Metamask wallet connected successfully\");}case 37:_context8.next=39;return web3.eth.getAccounts();case 39:metaMaskAccount=_context8.sent;metaMaskAccount=metaMaskAccount[0];requiredBalance=Number(current)<2000?\"\".concat(REACT_APP_MINT_PRICE*quantity):\"\".concat(REACT_APP_MINT_PRICE_AFTER_2K*quantity);_context8.next=44;return web3.eth.getBalance(metaMaskAccount,/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee7(err,result){var walletBalance;return _regeneratorRuntime.wrap(function _callee7$(_context7){while(1){switch(_context7.prev=_context7.next){case 0:if(!err){_context7.next=7;break;}console.log(err);_context7.next=4;return resetMinting(ct);case 4:return _context7.abrupt(\"return\");case 7:walletBalance=web3.utils.fromWei(result,\"ether\");console.log(\"walletBalance \",walletBalance+\" ETH\");console.log(\"Compare Balance: \",walletBalance,requiredBalance);if(!(walletBalance<requiredBalance)){_context7.next=17;break;}toast.error(\"Insufficient balance\");_context7.next=14;return resetMinting(ct);case 14:return _context7.abrupt(\"return\");case 17:_context7.prev=17;_context7.next=20;return ct.methods.mint().send({from:metaMaskAccount,value:web3.utils.toBN(web3.utils.toWei(requiredBalance,\"ether\"))}).on('transactionHash',/*#__PURE__*/function(){var _ref4=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee5(hash){return _regeneratorRuntime.wrap(function _callee5$(_context5){while(1){switch(_context5.prev=_context5.next){case 0:console.log(\"transactionHash :: \",hash);toast.success(\"Please wait minting is in progress\");setLoading(true);case 3:case\"end\":return _context5.stop();}}},_callee5);}));return function(_x4){return _ref4.apply(this,arguments);};}()).on('receipt',/*#__PURE__*/function(){var _ref5=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee6(receipt){return _regeneratorRuntime.wrap(function _callee6$(_context6){while(1){switch(_context6.prev=_context6.next){case 0:console.log(\"receipt :: \",receipt);toast.success(\"You have minted \".concat(quantity,\" NFT successfully.\"));setLoading(false);_context6.next=5;return resetMinting(ct);case 5:case\"end\":return _context6.stop();}}},_callee6);}));return function(_x5){return _ref5.apply(this,arguments);};}());case 20:_context7.next=28;break;case 22:_context7.prev=22;_context7.t0=_context7[\"catch\"](17);_context7.next=26;return resetMinting(ct);case 26:console.log(\"Error :: \",_context7.t0);if(_context7.t0&&_context7.t0.code&&_context7.t0.message){toast.error(_context7.t0.message);}case 28:case\"end\":return _context7.stop();}}},_callee7,null,[[17,22]]);}));return function(_x2,_x3){return _ref3.apply(this,arguments);};}());case 44:_context8.next=50;break;case 46:setHideMinting(false);toast.warn(\"Please Connect to ETHEREUM network\");console.log(\"===== SELECTEDNETWORK failed ==========\");setErrorMsg(\"Select \\\"\"+SELECTEDNETWORKNAME+\"\\\" network in your wallet to mint the NFT\");case 50:;_context8.next=54;break;case 53:if(window.web3){console.log(\"===== detectEthereumProvider failed ==========\");window.web3=new Web3(window.web3.currentProvider);}else{setHideMinting(false);console.log(\"===== detectEthereumProvider not found ==========\");// window.alert(\n//   \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n// );\n{setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");}}case 54:_context8.next=61;break;case 56:_context8.prev=56;_context8.t2=_context8[\"catch\"](1);setHideMinting(false);console.log(\"Error :: \",_context8.t2);if(_context8.t2&&_context8.t2.code&&_context8.t2.message){toast.error(_context8.t2.message);}case 61:case\"end\":return _context8.stop();}}},_callee8,null,[[1,56]]);}));return _loadWeb.apply(this,arguments);}return/*#__PURE__*/_jsx(\"div\",{children:!errormsg?/*#__PURE__*/_jsx(\"div\",{className:\"row mintingsection py-5\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"col-sm-12\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"yellow\",children:/*#__PURE__*/_jsxs(\"div\",{style:{display:\"flex\",flexDirection:\"row\",alignItems:\"center\",margin:\"auto\",width:\"320px\"},className:\"mt-2\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-white\",children:\"Quantity\"}),/*#__PURE__*/_jsxs(\"div\",{style:{marginLeft:\"10px\"},children:[/*#__PURE__*/_jsx(\"button\",{className:\"minus back-button px-3 mx-1\"// disabled={hideMinting}\n,onClick:function onClick(){if(quantity>1){setQuantity(quantity-1);}},children:\"-\"}),/*#__PURE__*/_jsx(\"span\",{style:{fontSize:30,margin:\"0 15px\",color:'#fff'},children:quantity}),/*#__PURE__*/_jsx(\"button\",{className:\"plus back-button px-3 mx-1\"//  disabled={hideMinting}\n,onClick:function onClick(){if(quantity<10){setQuantity(quantity+1);}},children:\"+\"})]})]})}),/*#__PURE__*/_jsx(\"button\",{className:\"mt-3 mint-btn mx-auto d-block\"// disabled={hideMinting}\n,onClick:function onClick(){loadWeb3();},children:loading?\"Loading...\":\"Mint a BTCBULLDOG!\"}),/*#__PURE__*/_jsx(\"h5\",{className:\"mt-2 supplytext\",children:\"10  Available Per Wallet\"})]})}):/*#__PURE__*/_jsx(\"h5\",{className:\"mt-2 supplytext\",children:/*#__PURE__*/_jsx(\"b\",{children:errormsg})})});}export default Mintbtn;","map":{"version":3,"sources":["/Users/babarhanif/minting dapp/src/mintbtn.js"],"names":["React","useState","useEffect","abi","Web3","detectEthereumProvider","useMoralis","toast","require","config","process","env","REACT_APP_CONTRACT_ADDRESS","REACT_APP_MINT_PRICE","REACT_APP_MINT_PRICE_AFTER_2K","SELECTEDNETWORK","SELECTEDNETWORKNAME","nftquantity","Mintbtn","loading","setLoading","isWalletConnected","setIsWalletConnected","errormsg","setErrorMsg","hideMinting","setHideMinting","quantity","setQuantity","totalSupply","settotalSupply","authenticate","isAuthenticated","isAuthenticating","user","account","logout","login","console","log","signingMessage","then","success","get","catch","error","logOut","getProvider","newProvider","window","ethereum","Error","isCoinbaseWallet","overrideIsMetaMask","providers","find","provider","isMetaMask","err","walletProvider","handleEthereum","web3","givenProvider","eth","net","getId","contractaddress","ct","Contract","methods","call","getAccounts","prevMetaMaskAccount","length","request","method","accountsList","addEventListener","once","setTimeout","code","message","resetMinting","loadWeb3","current","Number","warn","baseURI","baseURIis","metaMaskAccount","requiredBalance","getBalance","result","walletBalance","utils","fromWei","mint","send","from","value","toBN","toWei","on","hash","receipt","currentProvider","display","flexDirection","alignItems","margin","width","marginLeft","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport abi from \"./abi.json\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useMoralis } from \"react-moralis\";\nimport { toast } from 'react-toastify';\nrequire(\"dotenv\").config();\n\nconst { REACT_APP_CONTRACT_ADDRESS, REACT_APP_MINT_PRICE, REACT_APP_MINT_PRICE_AFTER_2K } = process.env;\nconst SELECTEDNETWORK = \"1\";\nconst SELECTEDNETWORKNAME = \" ETHEREUM MAINNET\";\nconst nftquantity = 10;\n\nfunction Mintbtn() {\n  const [loading, setLoading] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [errormsg, setErrorMsg] = useState(false);\n  const [hideMinting, setHideMinting] = useState(true);\n  const [quantity, setQuantity] = useState(1);\n  const [totalSupply, settotalSupply] = useState(0);\n\n  const { authenticate, isAuthenticated, isAuthenticating, user, account, logout } = useMoralis();\n\n  const login = async () => {\n    console.log(\"isAuthenticated :: \", isAuthenticated);\n    if (!isAuthenticated) {\n\n      await authenticate({ signingMessage: \"Log-in BTCBULLDOG\" })\n        .then(function (user) {\n          if (user) {\n            toast.success(\"Wallet connected successfully\");\n          }\n          console.log(\"logged in user:\", user);\n          console.log(user.get(\"ethAddress\"));\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  const logOut = async () => {\n\n    await logout();\n    toast.success(\"Logout successfully\")\n    console.log(\"logged out\");\n  }\n\n  const getProvider = () => {\n    //  const { provider } = store.getState();\n    let newProvider = null;\n    try {\n      if (!window.ethereum) throw new Error(\"Wallet not found\");\n      //   if (window.ethereum?.providers) {\n      //     newProvider =\n      //       window.ethereum.providers &&\n      //       window.ethereum.providers.find((provider) => provider.isMetaMask);\n      //   }\n      if (\n        window.ethereum?.isCoinbaseWallet ||\n        window.ethereum?.overrideIsMetaMask\n      )\n        newProvider = window.ethereum.providers.find(\n          (provider) => provider.isMetaMask\n        );\n      else newProvider = window.ethereum;\n      return newProvider;\n    } catch (err) {\n      console.log(err, \"ERROR_Wallet\");\n      //   store.dispatch(\n      //     alert({\n      //       title: \"\",\n      //       message: err.message || \"Window.ethereum not found or provider missed\",\n      //       severity: \"error\",\n      //       show: true,\n      //     })\n      //   );\n    }\n  }\n\n  useEffect(() => {\n    async function walletProvider() {\n      // await login();\n\n      try {\n        if (await detectEthereumProvider()) {\n          // setProvider(true);\n          // window.web3 = new Web3(window.ethereum);\n          const web3 = new Web3(getProvider() || Web3.givenProvider);\n\n          // const web3 = window.web3;\n          if (await web3.eth.net.getId() == SELECTEDNETWORK) {\n\n            const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n            const ct = new web3.eth.Contract(abi, contractaddress);\n            settotalSupply(10);\n\n\n            if (nftquantity - await ct.methods.totalSupply().call() == 0) {\n              setErrorMsg(\"All NFTs minted, Sale has ended\");\n            }\n\n\n            const prevMetaMaskAccount = await web3.eth.getAccounts();\n            // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n            const provider = getProvider();\n\n            if (prevMetaMaskAccount.length === 0) {\n              const accountsList = await provider.request({\n                method: \"eth_requestAccounts\",\n              });\n              // console.log(provider, \"accountsList ==> \", accountsList.length);\n              if (accountsList && accountsList.length > 0) {\n                toast.success(\"Metamask wallet connected successfully\");\n              }\n            }\n\n          }\n          else {\n            // setProvider(false);\n            setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n          }\n        }\n        else {\n          setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n          // setProvider(false);\n        }\n        if (window.ethereum) {\n          handleEthereum();\n        }\n        else {\n          window.addEventListener('ethereum#initialized', handleEthereum, { once: true, });\n          setTimeout(handleEthereum, 10000);\n        }\n\n        function handleEthereum() {\n          const { ethereum } = window;\n          if (ethereum && ethereum.isMetaMask) {\n            console.log('Ethereum successfully detected!');\n            // setProvider(true);\n          } else {\n            setErrorMsg('Please install MetaMask!');\n            // setProvider(false);\n          }\n        }\n      } catch (error) {\n        console.log(\"Error :: \", error);\n        if (error && error.code && error.message) {\n          toast.error(error.message);\n        }\n      }\n\n    }\n    walletProvider();\n\n  }, []);\n\n  async function resetMinting(ct) {\n    settotalSupply(await ct.methods.totalSupply().call());\n    setQuantity(1);\n    setHideMinting(false);\n  }\n\n  async function loadWeb3() {\n    setHideMinting(true);\n    // await login();\n\n    try {\n\n      if (await detectEthereumProvider()) {\n        const web3 = new Web3(getProvider() || Web3.givenProvider);\n\n        if (await web3.eth.net.getId() == SELECTEDNETWORK) {\n\n          // creating contract instance\n          const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n          const ct = new web3.eth.Contract(abi, contractaddress);\n          let current = await ct.methods.totalSupply().call();\n          console.log(nftquantity, \"======= current ========\", current)\n          if (Number(current) === nftquantity) {\n            console.log(\"======= total equal ========\")\n            toast.warn(\"No NFT Found\")\n            console.log(\"Sold out\");\n            await resetMinting(ct);\n            return;\n          }\n          const baseURIis = await ct.methods.baseURI().call();\n          console.log(\"get baseURIis ==> \", baseURIis)\n\n          const provider = getProvider();\n          const prevMetaMaskAccount = await web3.eth.getAccounts();\n          // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n\n          if (prevMetaMaskAccount.length === 0) {\n            const accountsList = await provider.request({\n              method: \"eth_requestAccounts\",\n            });\n            // console.log(\"accountsList ==> \", accountsList.length);\n\n            if (accountsList && accountsList.length > 0) {\n              toast.success(\"Metamask wallet connected successfully\");\n            }\n          }\n\n          // const web3 = window.web3;\n\n          // Meta Mask Connected Account Address\n          let metaMaskAccount = await web3.eth.getAccounts();\n          metaMaskAccount = metaMaskAccount[0];\n\n          const requiredBalance = Number(current) < 2000 ? `${REACT_APP_MINT_PRICE * quantity}` : `${REACT_APP_MINT_PRICE_AFTER_2K * quantity}`;\n\n          await web3.eth.getBalance(metaMaskAccount, async (err, result) => {\n            if (err) {\n              console.log(err)\n              await resetMinting(ct);\n              return;\n            } else {\n              const walletBalance = web3.utils.fromWei(result, \"ether\");\n              console.log(\"walletBalance \", walletBalance + \" ETH\");\n              console.log(\"Compare Balance: \", walletBalance, requiredBalance);\n              if (walletBalance < requiredBalance) {\n                toast.error(\"Insufficient balance\");\n                await resetMinting(ct);\n                return;\n              } else {\n\n                try {\n                  await ct.methods\n                    .mint()\n                    .send({\n                      from: metaMaskAccount,\n                      value: web3.utils.toBN(web3.utils.toWei(requiredBalance, \"ether\"))\n                    })\n                    .on('transactionHash', async function (hash) {\n                      console.log(\"transactionHash :: \", hash);\n                      toast.success(\"Please wait minting is in progress\");\n                      setLoading(true);\n                    })\n                    .on('receipt', async function (receipt) {\n                      console.log(\"receipt :: \", receipt);\n                      toast.success(`You have minted ${quantity} NFT successfully.`);\n                      setLoading(false);\n\n                      await resetMinting(ct);\n                    });\n\n                } catch (error) {\n                  await resetMinting(ct);\n                  console.log(\"Error :: \", error);\n                  if (error && error.code && error.message) {\n                    toast.error(error.message);\n                  }\n                }\n              }\n            }\n\n          });\n\n        } else {\n          setHideMinting(false);\n          toast.warn(\"Please Connect to ETHEREUM network\");\n          console.log(\"===== SELECTEDNETWORK failed ==========\");\n          setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n        };\n      } else if (window.web3) {\n        console.log(\"===== detectEthereumProvider failed ==========\")\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        setHideMinting(false);\n        console.log(\"===== detectEthereumProvider not found ==========\")\n        // window.alert(\n        //   \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n        // );\n        { setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\") }\n      }\n\n    } catch (error) {\n      setHideMinting(false);\n      console.log(\"Error :: \", error);\n      if (error && error.code && error.message) {\n        toast.error(error.message);\n      }\n    }\n  }\n\n  return (\n    <div>\n      {!errormsg ? (\n        <div className=\"row mintingsection py-5\">\n          <div className=\"col-sm-12\">\n            <div className=\"yellow\">\n              <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", margin: \"auto\", width: \"320px\" }} className=\"mt-2\">\n                <h3 className=\"text-white\">Quantity</h3>\n                <div style={{ marginLeft: \"10px\" }}>\n                  <button className=\"minus back-button px-3 mx-1\"\n                    // disabled={hideMinting}\n                    onClick={() => {\n                      if (quantity > 1) {\n                        setQuantity(quantity - 1);\n                      }\n                    }}\n                  >-</button>\n                  <span style={{ fontSize: 30, margin: \"0 15px\", color: '#fff' }}>\n                    {quantity}\n                  </span>\n                  <button\n                    className=\"plus back-button px-3 mx-1\"\n                    //  disabled={hideMinting}\n                    onClick={() => {\n                      if (quantity < 10) {\n                        setQuantity(quantity + 1);\n                      }\n                    }}\n                  >+</button>\n                </div>\n              </div>\n            </div>\n            <button\n              className=\"mt-3 mint-btn mx-auto d-block\"\n              // disabled={hideMinting}\n              onClick={() => {\n                loadWeb3();\n              }}\n            >{loading ? \"Loading...\" : \"Mint a BTCBULLDOG!\"}</button>\n            {/* <button\n              className=\"mt-3 mint-btn mx-auto d-block\"\n            >Minting <i class=\"fa fa-spinner fa-spin\"></i></button> */}\n\n            <h5 className=\"mt-2 supplytext\">10  Available Per Wallet</h5>\n          </div>\n        </div>) : <h5 className=\"mt-2 supplytext\"><b>{errormsg}</b></h5>}\n    </div>\n  );\n}\n\nexport default Mintbtn;"]},"metadata":{},"sourceType":"module"}