{"ast":null,"code":"var _jsxFileName = \"/Users/babarhanif/minting dapp/src/mintbtn.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport abi from \"./abi.json\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useMoralis } from \"react-moralis\";\nimport { toast } from 'react-toastify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire(\"dotenv\").config();\n\nconst {\n  REACT_APP_CONTRACT_ADDRESS,\n  REACT_APP_MINT_PRICE,\n  REACT_APP_MINT_PRICE_AFTER_2K\n} = process.env;\nconst SELECTEDNETWORK = \"1\";\nconst SELECTEDNETWORKNAME = \" ETHEREUM MAINNET\";\nconst nftquantity = 10;\n\nfunction Mintbtn() {\n  _s();\n\n  const [loading, setLoading] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [errormsg, setErrorMsg] = useState(false);\n  const [hideMinting, setHideMinting] = useState(true);\n  const [quantity, setQuantity] = useState(1);\n  const [totalSupply, settotalSupply] = useState(0);\n  const {\n    authenticate,\n    isAuthenticated,\n    isAuthenticating,\n    user,\n    account,\n    logout\n  } = useMoralis();\n\n  const login = async () => {\n    console.log(\"isAuthenticated :: \", isAuthenticated);\n\n    if (!isAuthenticated) {\n      await authenticate({\n        signingMessage: \"Log-in BTCBULLDOG\"\n      }).then(function (user) {\n        if (user) {\n          toast.success(\"Wallet connected successfully\");\n        }\n\n        console.log(\"logged in user:\", user);\n        console.log(user.get(\"ethAddress\"));\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  };\n\n  const logOut = async () => {\n    await logout();\n    toast.success(\"Logout successfully\");\n    console.log(\"logged out\");\n  };\n\n  const getProvider = () => {\n    //  const { provider } = store.getState();\n    let newProvider = null;\n\n    try {\n      var _window$ethereum, _window$ethereum2;\n\n      if (!window.ethereum) throw new Error(\"Wallet not found\"); //   if (window.ethereum?.providers) {\n      //     newProvider =\n      //       window.ethereum.providers &&\n      //       window.ethereum.providers.find((provider) => provider.isMetaMask);\n      //   }\n\n      if ((_window$ethereum = window.ethereum) !== null && _window$ethereum !== void 0 && _window$ethereum.isCoinbaseWallet || (_window$ethereum2 = window.ethereum) !== null && _window$ethereum2 !== void 0 && _window$ethereum2.overrideIsMetaMask) newProvider = window.ethereum.providers.find(provider => provider.isMetaMask);else newProvider = window.ethereum;\n      return newProvider;\n    } catch (err) {\n      console.log(err, \"ERROR_Wallet\"); //   store.dispatch(\n      //     alert({\n      //       title: \"\",\n      //       message: err.message || \"Window.ethereum not found or provider missed\",\n      //       severity: \"error\",\n      //       show: true,\n      //     })\n      //   );\n    }\n  };\n\n  useEffect(async () => {\n    const web3 = window.web3;\n    const webeProvider = new Web3(Web3.givenProvider);\n    const accounts = await webeProvider.eth.getAccounts();\n    console.log(\"account is\", accounts[0]);\n\n    async function walletProvider() {\n      // await login();\n      try {\n        if (await detectEthereumProvider()) {\n          // setProvider(true);\n          // window.web3 = new Web3(window.ethereum);\n          const web3 = new Web3(getProvider() || Web3.givenProvider); // const web3 = window.web3;\n\n          if ((await web3.eth.net.getId()) == SELECTEDNETWORK) {\n            const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n            const ct = new web3.eth.Contract(abi, contractaddress);\n            settotalSupply(10);\n\n            if (nftquantity - (await ct.methods.totalSupply().call()) == 0) {\n              setErrorMsg(\"All NFTs minted, Sale has ended\");\n            }\n\n            const prevMetaMaskAccount = await web3.eth.getAccounts(); // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n\n            const provider = getProvider();\n\n            if (prevMetaMaskAccount.length === 0) {\n              const accountsList = await provider.request({\n                method: \"eth_requestAccounts\"\n              }); // console.log(provider, \"accountsList ==> \", accountsList.length);\n\n              if (accountsList && accountsList.length > 0) {\n                toast.success(\"Metamask wallet connected successfully\");\n              }\n            }\n          } else {\n            // setProvider(false);\n            setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n          }\n        } else {\n          setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\"); // setProvider(false);\n        }\n\n        if (window.ethereum) {\n          handleEthereum();\n        } else {\n          window.addEventListener('ethereum#initialized', handleEthereum, {\n            once: true\n          });\n          setTimeout(handleEthereum, 10000);\n        }\n\n        function handleEthereum() {\n          const {\n            ethereum\n          } = window;\n\n          if (ethereum && ethereum.isMetaMask) {\n            console.log('Ethereum successfully detected!'); // setProvider(true);\n          } else {\n            setErrorMsg('Please install MetaMask!'); // setProvider(false);\n          }\n        }\n      } catch (error) {\n        console.log(\"Error :: \", error);\n\n        if (error && error.code && error.message) {\n          toast.error(error.message);\n        }\n      }\n    }\n\n    walletProvider();\n  }, []);\n\n  async function resetMinting(ct) {\n    settotalSupply(await ct.methods.totalSupply().call());\n    setQuantity(1);\n    setHideMinting(false);\n  }\n\n  async function loadWeb3() {\n    setHideMinting(true); // await login();\n\n    try {\n      if (await detectEthereumProvider()) {\n        const web3 = new Web3(getProvider() || Web3.givenProvider);\n\n        if ((await web3.eth.net.getId()) == SELECTEDNETWORK) {\n          // creating contract instance\n          const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n          const ct = new web3.eth.Contract(abi, contractaddress);\n          let current = await ct.methods.totalSupply().call();\n          console.log(nftquantity, \"======= current ========\", current);\n\n          if (Number(current) === nftquantity) {\n            console.log(\"======= total equal ========\");\n            toast.warn(\"No NFT Found\");\n            console.log(\"Sold out\");\n            await resetMinting(ct);\n            return;\n          }\n\n          const baseURIis = await ct.methods.baseURI().call();\n          console.log(\"get baseURIis ==> \", baseURIis);\n          const provider = getProvider();\n          const prevMetaMaskAccount = await web3.eth.getAccounts(); // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n\n          if (prevMetaMaskAccount.length === 0) {\n            const accountsList = await provider.request({\n              method: \"eth_requestAccounts\"\n            }); // console.log(\"accountsList ==> \", accountsList.length);\n\n            if (accountsList && accountsList.length > 0) {\n              toast.success(\"Metamask wallet connected successfully\");\n            }\n          } // const web3 = window.web3;\n          // Meta Mask Connected Account Address\n\n\n          let metaMaskAccount = await web3.eth.getAccounts();\n          metaMaskAccount = metaMaskAccount[0];\n          const requiredBalance = Number(current) < 2000 ? `${REACT_APP_MINT_PRICE * quantity}` : `${REACT_APP_MINT_PRICE_AFTER_2K * quantity}`;\n          await web3.eth.getBalance(metaMaskAccount, async (err, result) => {\n            if (err) {\n              console.log(err);\n              await resetMinting(ct);\n              return;\n            } else {\n              const walletBalance = web3.utils.fromWei(result, \"ether\");\n              console.log(\"walletBalance \", walletBalance + \" ETH\");\n              console.log(\"Compare Balance: \", walletBalance, requiredBalance);\n\n              if (walletBalance < requiredBalance) {\n                toast.error(\"Insufficient balance\");\n                await resetMinting(ct);\n                return;\n              } else {\n                try {\n                  await ct.methods.mint().send({\n                    from: metaMaskAccount,\n                    value: web3.utils.toBN(web3.utils.toWei(requiredBalance, \"ether\"))\n                  }).on('transactionHash', async function (hash) {\n                    console.log(\"transactionHash :: \", hash);\n                    toast.success(\"Please wait minting is in progress\");\n                    setLoading(true);\n                  }).on('receipt', async function (receipt) {\n                    console.log(\"receipt :: \", receipt);\n                    toast.success(`You have minted ${quantity} NFT successfully.`);\n                    setLoading(false);\n                    await resetMinting(ct);\n                  });\n                } catch (error) {\n                  await resetMinting(ct);\n                  console.log(\"Error :: \", error);\n\n                  if (error && error.code && error.message) {\n                    toast.error(error.message);\n                  }\n                }\n              }\n            }\n          });\n        } else {\n          setHideMinting(false);\n          toast.warn(\"Please Connect to ETHEREUM network\");\n          console.log(\"===== SELECTEDNETWORK failed ==========\");\n          setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n        }\n\n        ;\n      } else if (window.web3) {\n        console.log(\"===== detectEthereumProvider failed ==========\");\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        setHideMinting(false);\n        console.log(\"===== detectEthereumProvider not found ==========\"); // window.alert(\n        //   \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n        // );\n\n        {\n          setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n        }\n      }\n    } catch (error) {\n      setHideMinting(false);\n      console.log(\"Error :: \", error);\n\n      if (error && error.code && error.message) {\n        toast.error(error.message);\n      }\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: !errormsg ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mintingsection py-5\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-sm-12\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"yellow\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"row\",\n              alignItems: \"center\",\n              margin: \"auto\",\n              width: \"320px\"\n            },\n            className: \"mt-2\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              className: \"text-white\",\n              children: \"Quantity\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                marginLeft: \"10px\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"minus back-button px-3 mx-1\" // disabled={hideMinting}\n                ,\n                onClick: () => {\n                  if (quantity > 1) {\n                    setQuantity(quantity - 1);\n                  }\n                },\n                children: \"-\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 305,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  fontSize: 30,\n                  margin: \"0 15px\",\n                  color: '#fff'\n                },\n                children: quantity\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 313,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"plus back-button px-3 mx-1\" //  disabled={hideMinting}\n                ,\n                onClick: () => {\n                  if (quantity < 10) {\n                    setQuantity(quantity + 1);\n                  }\n                },\n                children: \"+\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 316,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 304,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"mt-3 mint-btn mx-auto d-block\" // disabled={hideMinting}\n          ,\n          onClick: () => {\n            loadWeb3();\n          },\n          children: loading ? \"Loading...\" : \"Mint a BTCBULLDOG!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h5\", {\n      className: \"mt-2 supplytext\",\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: errormsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 51\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Mintbtn, \"kaRLi8YdATSzt+DmopJ7lTW5utI=\", false, function () {\n  return [useMoralis];\n});\n\n_c = Mintbtn;\nexport default Mintbtn;\n\nvar _c;\n\n$RefreshReg$(_c, \"Mintbtn\");","map":{"version":3,"sources":["/Users/babarhanif/minting dapp/src/mintbtn.js"],"names":["React","useState","useEffect","abi","Web3","detectEthereumProvider","useMoralis","toast","require","config","REACT_APP_CONTRACT_ADDRESS","REACT_APP_MINT_PRICE","REACT_APP_MINT_PRICE_AFTER_2K","process","env","SELECTEDNETWORK","SELECTEDNETWORKNAME","nftquantity","Mintbtn","loading","setLoading","isWalletConnected","setIsWalletConnected","errormsg","setErrorMsg","hideMinting","setHideMinting","quantity","setQuantity","totalSupply","settotalSupply","authenticate","isAuthenticated","isAuthenticating","user","account","logout","login","console","log","signingMessage","then","success","get","catch","error","logOut","getProvider","newProvider","window","ethereum","Error","isCoinbaseWallet","overrideIsMetaMask","providers","find","provider","isMetaMask","err","web3","webeProvider","givenProvider","accounts","eth","getAccounts","walletProvider","net","getId","contractaddress","ct","Contract","methods","call","prevMetaMaskAccount","length","accountsList","request","method","handleEthereum","addEventListener","once","setTimeout","code","message","resetMinting","loadWeb3","current","Number","warn","baseURIis","baseURI","metaMaskAccount","requiredBalance","getBalance","result","walletBalance","utils","fromWei","mint","send","from","value","toBN","toWei","on","hash","receipt","currentProvider","display","flexDirection","alignItems","margin","width","marginLeft","fontSize","color"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport abi from \"./abi.json\";\nimport Web3 from \"web3\";\nimport detectEthereumProvider from '@metamask/detect-provider';\nimport { useMoralis } from \"react-moralis\";\nimport { toast } from 'react-toastify';\nrequire(\"dotenv\").config();\n\nconst { REACT_APP_CONTRACT_ADDRESS, REACT_APP_MINT_PRICE, REACT_APP_MINT_PRICE_AFTER_2K } = process.env;\nconst SELECTEDNETWORK = \"1\";\nconst SELECTEDNETWORKNAME = \" ETHEREUM MAINNET\";\nconst nftquantity = 10;\n\n function Mintbtn() {\n\n\n\n  const [loading, setLoading] = useState(false);\n  const [isWalletConnected, setIsWalletConnected] = useState(false);\n  const [errormsg, setErrorMsg] = useState(false);\n  const [hideMinting, setHideMinting] = useState(true);\n  const [quantity, setQuantity] = useState(1);\n  const [totalSupply, settotalSupply] = useState(0);\n\n  const { authenticate, isAuthenticated, isAuthenticating, user, account, logout } = useMoralis();\n\n  const login = async () => {\n    console.log(\"isAuthenticated :: \", isAuthenticated);\n    if (!isAuthenticated) {\n\n      await authenticate({ signingMessage: \"Log-in BTCBULLDOG\" })\n        .then(function (user) {\n          if (user) {\n            toast.success(\"Wallet connected successfully\");\n          }\n          console.log(\"logged in user:\", user);\n          console.log(user.get(\"ethAddress\"));\n        })\n        .catch(function (error) {\n          console.log(error);\n        });\n    }\n  }\n\n  const logOut = async () => {\n\n    await logout();\n    toast.success(\"Logout successfully\")\n    console.log(\"logged out\");\n  }\n\n  const getProvider = () => {\n    //  const { provider } = store.getState();\n    let newProvider = null;\n    try {\n      if (!window.ethereum) throw new Error(\"Wallet not found\");\n      //   if (window.ethereum?.providers) {\n      //     newProvider =\n      //       window.ethereum.providers &&\n      //       window.ethereum.providers.find((provider) => provider.isMetaMask);\n      //   }\n      if (\n        window.ethereum?.isCoinbaseWallet ||\n        window.ethereum?.overrideIsMetaMask\n      )\n        newProvider = window.ethereum.providers.find(\n          (provider) => provider.isMetaMask\n        );\n      else newProvider = window.ethereum;\n      return newProvider;\n    } catch (err) {\n      console.log(err, \"ERROR_Wallet\");\n      //   store.dispatch(\n      //     alert({\n      //       title: \"\",\n      //       message: err.message || \"Window.ethereum not found or provider missed\",\n      //       severity: \"error\",\n      //       show: true,\n      //     })\n      //   );\n    }\n  }\n\n  useEffect(async () => {\n\n    const web3 = window.web3;\n    const webeProvider = new Web3(Web3.givenProvider);\n    const accounts = await webeProvider.eth.getAccounts();\n    console.log(\"account is\" ,  accounts[0]);\n\n    async function walletProvider() {\n      // await login();\n\n      try {\n        if (await detectEthereumProvider()) {\n          // setProvider(true);\n          // window.web3 = new Web3(window.ethereum);\n          const web3 = new Web3(getProvider() || Web3.givenProvider);\n\n          // const web3 = window.web3;\n          if (await web3.eth.net.getId() == SELECTEDNETWORK) {\n\n            const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n            const ct = new web3.eth.Contract(abi, contractaddress);\n            settotalSupply(10);\n\n\n            if (nftquantity - await ct.methods.totalSupply().call() == 0) {\n              setErrorMsg(\"All NFTs minted, Sale has ended\");\n            }\n\n\n            const prevMetaMaskAccount = await web3.eth.getAccounts();\n            // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n            const provider = getProvider();\n\n            if (prevMetaMaskAccount.length === 0) {\n              const accountsList = await provider.request({\n                method: \"eth_requestAccounts\",\n              });\n              // console.log(provider, \"accountsList ==> \", accountsList.length);\n              if (accountsList && accountsList.length > 0) {\n                toast.success(\"Metamask wallet connected successfully\");\n              }\n            }\n\n          }\n          else {\n            // setProvider(false);\n            setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n          }\n        }\n        else {\n          setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n          // setProvider(false);\n        }\n        if (window.ethereum) {\n          handleEthereum();\n        }\n        else {\n          window.addEventListener('ethereum#initialized', handleEthereum, { once: true, });\n          setTimeout(handleEthereum, 10000);\n        }\n\n        function handleEthereum() {\n          const { ethereum } = window;\n          if (ethereum && ethereum.isMetaMask) {\n            console.log('Ethereum successfully detected!');\n            // setProvider(true);\n          } else {\n            setErrorMsg('Please install MetaMask!');\n            // setProvider(false);\n          }\n        }\n      } catch (error) {\n        console.log(\"Error :: \", error);\n        if (error && error.code && error.message) {\n          toast.error(error.message);\n        }\n      }\n\n    }\n    walletProvider();\n\n  }, []);\n\n  async function resetMinting(ct) {\n    settotalSupply(await ct.methods.totalSupply().call());\n    setQuantity(1);\n    setHideMinting(false);\n  }\n\n  async function loadWeb3() {\n    setHideMinting(true);\n    // await login();\n\n    try {\n\n      if (await detectEthereumProvider()) {\n        const web3 = new Web3(getProvider() || Web3.givenProvider);\n\n        if (await web3.eth.net.getId() == SELECTEDNETWORK) {\n\n          // creating contract instance\n          const contractaddress = REACT_APP_CONTRACT_ADDRESS;\n          const ct = new web3.eth.Contract(abi, contractaddress);\n          let current = await ct.methods.totalSupply().call();\n          console.log(nftquantity, \"======= current ========\", current)\n          if (Number(current) === nftquantity) {\n            console.log(\"======= total equal ========\")\n            toast.warn(\"No NFT Found\")\n            console.log(\"Sold out\");\n            await resetMinting(ct);\n            return;\n          }\n          const baseURIis = await ct.methods.baseURI().call();\n          console.log(\"get baseURIis ==> \", baseURIis)\n\n          const provider = getProvider();\n          const prevMetaMaskAccount = await web3.eth.getAccounts();\n          // console.log(\"prevMetaMaskAccount ==> \", prevMetaMaskAccount);\n\n          if (prevMetaMaskAccount.length === 0) {\n            const accountsList = await provider.request({\n              method: \"eth_requestAccounts\",\n            });\n            // console.log(\"accountsList ==> \", accountsList.length);\n\n            if (accountsList && accountsList.length > 0) {\n              toast.success(\"Metamask wallet connected successfully\");\n            }\n          }\n\n          // const web3 = window.web3;\n\n          // Meta Mask Connected Account Address\n          let metaMaskAccount = await web3.eth.getAccounts();\n          metaMaskAccount = metaMaskAccount[0];\n\n          const requiredBalance = Number(current) < 2000 ? `${REACT_APP_MINT_PRICE * quantity}` : `${REACT_APP_MINT_PRICE_AFTER_2K * quantity}`;\n\n          await web3.eth.getBalance(metaMaskAccount, async (err, result) => {\n            if (err) {\n              console.log(err)\n              await resetMinting(ct);\n              return;\n            } else {\n              const walletBalance = web3.utils.fromWei(result, \"ether\");\n              console.log(\"walletBalance \", walletBalance + \" ETH\");\n              console.log(\"Compare Balance: \", walletBalance, requiredBalance);\n              if (walletBalance < requiredBalance) {\n                toast.error(\"Insufficient balance\");\n                await resetMinting(ct);\n                return;\n              } else {\n\n                try {\n                  await ct.methods\n                    .mint()\n                    .send({\n                      from: metaMaskAccount,\n                      value: web3.utils.toBN(web3.utils.toWei(requiredBalance, \"ether\"))\n                    })\n                    .on('transactionHash', async function (hash) {\n                      console.log(\"transactionHash :: \", hash);\n                      toast.success(\"Please wait minting is in progress\");\n                      setLoading(true);\n                    })\n                    .on('receipt', async function (receipt) {\n                      console.log(\"receipt :: \", receipt);\n                      toast.success(`You have minted ${quantity} NFT successfully.`);\n                      setLoading(false);\n\n                      await resetMinting(ct);\n                    });\n\n                } catch (error) {\n                  await resetMinting(ct);\n                  console.log(\"Error :: \", error);\n                  if (error && error.code && error.message) {\n                    toast.error(error.message);\n                  }\n                }\n              }\n            }\n\n          });\n\n        } else {\n          setHideMinting(false);\n          toast.warn(\"Please Connect to ETHEREUM network\");\n          console.log(\"===== SELECTEDNETWORK failed ==========\");\n          setErrorMsg(\"Select \\\"\" + SELECTEDNETWORKNAME + \"\\\" network in your wallet to mint the NFT\");\n        };\n      } else if (window.web3) {\n        console.log(\"===== detectEthereumProvider failed ==========\")\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        setHideMinting(false);\n        console.log(\"===== detectEthereumProvider not found ==========\")\n        // window.alert(\n        //   \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n        // );\n        { setErrorMsg(\"Non-Ethereum browser detected. You should consider trying MetaMask!\") }\n      }\n\n    } catch (error) {\n      setHideMinting(false);\n      console.log(\"Error :: \", error);\n      if (error && error.code && error.message) {\n        toast.error(error.message);\n      }\n    }\n  }\n\n  return (\n    <div>\n      {!errormsg ? (\n        <div className=\"row mintingsection py-5\">\n          <div className=\"col-sm-12\">\n            <div className=\"yellow\">\n              <div style={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\", margin: \"auto\", width: \"320px\" }} className=\"mt-2\">\n                <h3 className=\"text-white\">Quantity</h3>\n                <div style={{ marginLeft: \"10px\" }}>\n                  <button className=\"minus back-button px-3 mx-1\"\n                    // disabled={hideMinting}\n                    onClick={() => {\n                      if (quantity > 1) {\n                        setQuantity(quantity - 1);\n                      }\n                    }}\n                  >-</button>\n                  <span style={{ fontSize: 30, margin: \"0 15px\", color: '#fff' }}>\n                    {quantity}\n                  </span>\n                  <button\n                    className=\"plus back-button px-3 mx-1\"\n                    //  disabled={hideMinting}\n                    onClick={() => {\n                      if (quantity < 10) {\n                        setQuantity(quantity + 1);\n                      }\n                    }}\n                  >+</button>\n                </div>\n              </div>\n            </div>\n            <button\n              className=\"mt-3 mint-btn mx-auto d-block\"\n              // disabled={hideMinting}\n              onClick={() => {\n                loadWeb3();\n              }}\n            >{loading ? \"Loading...\" : \"Mint a BTCBULLDOG!\"}</button>\n            {/* <button\n              className=\"mt-3 mint-btn mx-auto d-block\"\n            >Minting <i class=\"fa fa-spinner fa-spin\"></i></button> */}\n\n            {/* <h5 className=\"mt-2 supplytext\">10  Available Per Wallet</h5> */}\n          </div>\n        </div>) : <h5 className=\"mt-2 supplytext\"><b>{errormsg}</b></h5>}\n    </div>\n  );\n}\n\nexport default Mintbtn;"]},"metadata":{},"sourceType":"module"}